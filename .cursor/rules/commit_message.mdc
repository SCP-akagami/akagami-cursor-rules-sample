---
description: 
globs: 
alwaysApply: false
---
**原則**

- まず、このファイルを参照したら、「commit_message.mdcを参照しました」と叫ぶこと
- 前回のコミットの差異を自動的に取得した上でコミットメッセージの案を出すこと

1. 差分の取得：
   - 以下のコマンドを実行して現在の変更点を取得してください
   ```bash
   git diff HEAD
   ```
   - もしくはステージングされた変更のみを確認する場合は
   ```bash
   git diff --staged
   ```
   - これらの結果を分析してコミットメッセージを作成してください

2. コミットメッセージは以下の形式で記述してください：
   ```
   <type>: <subject>

   <body>
   ```

3. typeは以下のいずれかを使用してください：
   - feat: 新機能
   - fix: バグ修正
   - docs: ドキュメントのみの変更
   - style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
   - refactor: バグ修正や機能追加ではないコードの変更
   - test: テストの追加・修正
   - chore: ビルドプロセスやツールの変更、ライブラリの更新など

4. subjectは以下のルールに従ってください：
   - 命令形で記述（例：「add」ではなく「added」）
   - 50文字以内
   - 文末にピリオドを付けない
   - 日本語の場合は「〜を追加」「〜を修正」などの形式

5. bodyは以下のルールに従ってください：
   - 変更の理由や背景を説明
   - 72文字以内で折り返し
   - 空行で区切って複数段落を記述可能

6. コミットメッセージを作成する際は、以下の手順で進めてください：
   - 前回のコミットからの変更内容を確認
   - 変更の種類（type）を特定
   - 変更内容を簡潔に説明するsubjectを作成
   - 必要に応じて詳細な説明をbodyに記述

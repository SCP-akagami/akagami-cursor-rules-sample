---
description: 
globs: 
alwaysApply: false
---
1. **ディレクトリ構造の確認と記録**
   - プロジェクト開始時は、まずdirectory_structure.mdの存在を確認すること
   - directory_structure.mdが存在しない場合は、list_dirツールを使用してプロジェクト全体の構造を詳細に分析し、新規作成すること
   - 既存のdirectory_structure.mdがある場合は内容を確認し、実際の構造と相違があれば更新すること
   - 各ディレクトリの役割と責務を明記し、MVCパターンやレイヤードアーキテクチャなどの設計パターンを特定すること

2. **基本ドキュメントの存在確認と作成・更新**
   - directory_structure.mdを参照して、以下の基本ドキュメントの存在を正確に確認すること
     - **技術ドキュメント**: README.md（確認のみ、更新は行わない）、technology_stack.md
     - **業務要件ドキュメント**: 画面一覧.md、画面遷移図.md、業務フロー図.md
   - file_searchやlist_dirツールで確実にファイルの存在を確認し、推測でファイルの存在を判断しないこと
   - README.md以外のファイルが存在する場合は内容を確認し、必要に応じて最新情報に更新すること
   - 存在しないファイルは、プロジェクト分析結果を基に新規作成すること

3. **基本ドキュメントの確認とプロジェクト概要把握**
   - 技術ドキュメント（README.md、technology_stack.md、directory_structure.md）を確認し、プロジェクト概要を把握してから作業を開始すること（README.mdは参照のみで更新は行わない）
   - 業務要件ドキュメント（画面一覧.md、画面遷移図.md、業務フロー図.md）を確認し、システムの目的と主要機能を理解すること
   - ドキュメントが不十分な場合は、コードベース分析により情報を補完すること

4. 技術スタックの確認では、使用されているフレームワーク、ライブラリ、データベース、インフラ構成を詳細に分析し、バージョン情報も含めて整理すること

5. 既存コードベースの重要な共通処理、ユーティリティ関数、設定ファイルを特定し、新規実装時の参考となる実装パターンを把握すること

6. データモデルとビジネスロジックの関係性を分析し、主要なエンティティ間の関連性とデータフローを理解すること

7. 認証・認可の仕組み、セキュリティ対策、エラーハンドリングの方針を確認し、プロジェクト固有のセキュリティ要件を把握すること

8. テスト戦略とテストコードの構造を分析し、単体テスト、結合テスト、E2Eテストの実装方針を理解すること

9. デプロイメントプロセス、環境設定、CI/CDパイプラインの構成を確認し、開発フローを把握すること

10. 既存の命名規則、コーディング規約、コメント記述方針を分析し、プロジェクト固有のスタイルガイドに準拠すること
